import proguard.gradle.ProGuardTask


apply plugin: 'kotlin'

apply plugin: 'maven'

//apply plugin: 'com.github.dcendents.android-maven'

apply plugin: "com.jfrog.bintray"
group = 'com.tomatobean'
version = '1.0.8'

buildscript {
    ext.kotlinVersion = '1.2.0'
    ext.json_lib_version = '20171018'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile "org.json:json:$json_lib_version"
    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-test-junit
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.json:json:$json_lib_version"
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'

}

def siteUrl = 'https://github.com/gtomato/Kotlin-JsonParser'      // Homepage URL of the library
def gitUrl = 'https://github.com/gtomato/Kotlin-JsonParser.git'   // Git repository URL

uploadArchives {
    tasks.build.dependsOn 'deleteTemp'
    repositories {
        mavenDeployer {
            repository(url: mavenLocal().getUrl())
        }
    }
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'jar'

                // Add your description here
                name 'com.tomatobean:jsonparser'
                description = 'Kotlin-JsonParser is a Kotlin library for JSON parsing. It can parse JSON string to Kotlin Object or reverse in a simple way.'
                url siteUrl
                licenses {
                    license {
                        name "The MIT License"
                        url "http://www.opensource.org/licenses/MIT"
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'hinl1007'
                        name 'Hin Lai'
                        email 'hinls1007@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

def javaName = archivesBaseName + '-java'
def fullJavaName = archivesBaseName + ''
task proguard(type: ProGuardTask, dependsOn: 'build') {
    configuration 'proguard-rules.pro'
    ignorewarnings()

    injars "$buildDir/libs/${fullJavaName}-${version}.jar"
    outjars "$buildDir/libs/${javaName}-${version}.jar"
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
}
task deleteOrigin(type: Delete, dependsOn: proguard) {
    delete "$buildDir/libs/${fullJavaName}-${version}.jar"
}
task fixTarget(type: Copy, dependsOn: deleteOrigin) {
    from "$buildDir/libs/${javaName}-${version}.jar"
    into "$buildDir/libs"
    rename { String fileName ->
        fileName.replace('-java', '')
    }
}
task deleteTemp(type: Delete, dependsOn: fixTarget) {
    delete "$buildDir/libs/${javaName}-${version}.jar"
}


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

// https://github.com/bintray/gradle-bintray-plugin
bintray {
    tasks.build.dependsOn 'deleteTemp'

    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = "TomatoBean"
        // it is the name that appears in bintray when logged
        name = "com.tomatobean:jsonparser"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["MIT"]
        publish = true
        version {
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password") //Optional. The passphrase for GPG signing'
            }
        }
    }
}